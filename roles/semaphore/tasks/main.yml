---
- name: Check if EPEL repo is already configured.
  stat: path={{ epel_repofile_path }}
  register: epel_repofile_result

- name: Install EPEL repo.
  yum:
    name: "{{ epel_repo_url }}"
    state: present
  register: result
  until: '"failed" not in result'
  retries: 5
  delay: 10
  when: not epel_repofile_result.stat.exists

- name: Import EPEL GPG key.
  rpm_key:
    key: "{{ epel_repo_gpg_key_url }}"
    state: present
  when: not epel_repofile_result.stat.exists
  ignore_errors: "{{ ansible_check_mode }}"

# enable chrony
- name: Install chrony
  yum: name=chrony

- name: Start the chrony service
  action: service name=chrony state=started

##### mysql

- name: Check if Service Exists
  stat: path=/etc/my.cnf
    register: service_mysql_alredy_exist

- name: install mysql repo from a remote repo
  yum:
    name:  http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
    state: present
  when: service_mysql_alredy_exist.changed == false 

- name: Install MySQL
  action: yum name={{ item }}
  with_items:
    - MySQL-python
    - mysql
    - mysql-server
  when: service_mysql_alredy_exist.changed

- name: Start the MySQL service
  action: service name=mysqld state=started
  when: service_mysql_alredy_exist.changed

- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_password }}
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  ignore_errors: True
  when: service_mysql_alredy_exist.changed

# END mysql

- name: Install ansible
  action: yum name={{ item }}
  with_items:
    - ansible
    - git

- name: install semaphore
  shell: easy_install pexpect

- name: download file and force basic auth
  get_url:
    url: https://github.com/ansible-semaphore/semaphore/releases/download/v2.3.0/semaphore_linux_amd64
    dest: /usr/bin/semaphore
    force_basic_auth: yes
    mode: 0750

- name: openfirewall
  shell: firewall-cmd --zone=public --add-port=3000/tcp  --permanent

- name: reload openfirewall
  shell: firewall-cmd --reload
  
- name: create directories var
  file: path=/var/semaphore state=directory     
        
- name: Create directory ssh for no keyring
  file: path=/root/.ssh state=directory 

- copy: src=files/config
    dest=/root/.ssh/config